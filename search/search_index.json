{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to the Atomic Cloud project. Please note that the cloud is currently in its early development stages, and you may encounter bugs. If you experience any issues, kindly report them by opening an issue on our GitHub repository.</p>"},{"location":"#documentation-status","title":"Documentation Status \ud83d\udea7","text":"<p>This documentation is a work in progress. We apologize for any grammatical errors or incomplete sections you may come across. We welcome contributions from the community. If you wish to help improve the documentation, please feel free to submit a Pull Request.</p>"},{"location":"#installation","title":"Installation","text":"<p>The Atomic Cloud consists of two main components: the Controller and the CLI.</p>"},{"location":"#controller","title":"Controller","text":"<p>The Controller should be installed in an environment that can operate continuously, such as a Raspberry Pi or a cloud server. It is responsible for managing the core functionalities of the cloud system.</p>"},{"location":"#cli","title":"CLI","text":"<p>The CLI is a client application that allows you to interact with the Controller. It can be installed on your local computer, providing you with convenient access to manage the cloud system.</p>"},{"location":"api/","title":"Available Options","text":"<p>Currently, the cloud offers a first-party JVM library. This library is compatible with all programming languages that compile to JVM bytecode, providing a versatile solution for developers working within the JVM ecosystem.</p>"},{"location":"api/options/jvm/","title":"JVM","text":"<p>The API is published on the GitHub Packages Maven repository. You may need to authenticate to access it. For more information about the packages, please click here.</p>"},{"location":"api/options/jvm/#maven","title":"Maven","text":"<p>To include the API in your Maven project, add the following dependency to your <code>pom.xml</code> file:</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;io.atomic.cloud&lt;/groupId&gt;\n  &lt;artifactId&gt;api&lt;/artifactId&gt;\n  &lt;version&gt;0.1.0-SNAPSHOT&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"api/options/jvm/#gradle","title":"Gradle","text":"<p>To include the API in your Gradle project, add the following dependency to your <code>build.gradle</code> file:</p> <pre><code>dependencies {\n    implementation(\"io.atomic.cloud:api:0.1.0-SNAPSHOT\")\n}\n</code></pre>"},{"location":"cli/","title":"CLI","text":"<p>This page provides instructions on how to download and use the CLI for controlling the controller.</p>"},{"location":"cli/#download-the-cli","title":"Download the CLI","text":"<p>You can download the latest CLI binary from the GitHub releases page.</p>"},{"location":"cli/#installation","title":"Installation","text":"<ol> <li>Download the appropriate binary for your operating system.</li> <li>Place the binary in a directory that is included in your system's PATH.</li> </ol>"},{"location":"cli/#usage","title":"Usage","text":"<p>Run the CLI from your terminal and follow the instructions provided by the CLI to control the controller.</p> <p>We\u2019re actively working to provide more detailed and useful content here. Please check back soon for updates.</p>"},{"location":"controller/","title":"What is the controller?","text":"<p>The controller is a crucial component of the cloud. It manages the nodes and is responsible for overseeing the servers initiated by the cloud.</p>"},{"location":"controller/drivers/","title":"Introduction","text":"<p>The controller is engineered to support a variety of driver platforms. Presently, the primary platform for developing drivers is WASM utilizing the WASI Preview 2. Should you choose not to use a WASM driver, you are encouraged to implement your own mechanism and contribute it through a pull request.</p>"},{"location":"controller/drivers/wasm/","title":"Available Options","text":"<p>Currently, there is only one driver that integrates the Pterodactyl panel into the controller. A local version similar to CloudNet is planned, as well as a local Docker daemon version. If you need to integrate something unique, feel free to create a WASM driver and place it in the drivers directory on a WASM-enabled controller.</p>"},{"location":"controller/drivers/wasm/permissions/","title":"Permissions","text":"<p>WASM drivers operate within a sandbox environment, which means they have very limited access to the host system by default. The WASI standard and the controller provide APIs to enable integration with network or local resources. However, you must grant the appropriate permissions to the driver you install to allow such access.</p> <p>You can configure the permissions in the <code>configs/wasm.toml</code> file:</p> <pre><code>nano wasm.toml\n</code></pre> <pre><code># This configuration is crucial for granting the drivers their required permissions\n# https://httprafa.github.io/atomic-cloud/controller/drivers/wasm/permissions/\n\n[[drivers]]\nname = \"local\"\ninherit_stdio = true\ninherit_args = true\ninherit_env = true\ninherit_network = true\nallow_ip_name_lookup = true\nallow_http = true\nallow_child_processes = true\n\n[[drivers.mounts]]\nhost = \"/var/run/docker.sock\"\nguest = \"/var/run/docker.sock\"\n\n[[drivers]]\nname = \"pterodactyl\"\ninherit_stdio = false\ninherit_args = false\ninherit_env = false\ninherit_network = true\nallow_ip_name_lookup = true\nallow_http = true\nallow_child_processes = false\nmounts = []\n</code></pre>"},{"location":"controller/drivers/wasm/local/","title":"Installation","text":"<ol> <li>Download the <code>local-driver.wasm</code> file from the GitHub releases page.</li> <li>Place the downloaded file into the <code>drivers</code> directory.</li> <li>Start the controller.</li> </ol>"},{"location":"controller/drivers/wasm/pterodactyl/","title":"Installation","text":"<ol> <li>Download the <code>pterodactyl-driver.wasm</code> file from the GitHub releases page.</li> <li>Place the downloaded file into the <code>drivers</code> directory.</li> <li>Start the controller.</li> </ol>"},{"location":"controller/installation/docker/","title":"Docker Installation (Recommended)","text":"<p>The most straightforward method to install the controller is by utilizing a Docker image. Follow the steps below to set it up using Docker Compose:</p>"},{"location":"controller/installation/docker/#step-1-create-the-docker-composeyml-file","title":"Step 1: Create the <code>docker-compose.yml</code> File","text":"<p>First, use a text editor to create the <code>docker-compose.yml</code> file:</p> <pre><code>nano docker-compose.yml\n</code></pre> <p>Next, add the following content to the file:</p> <pre><code>services:\n  controller:\n    image: ghcr.io/httprafa/atomic-cloud:latest\n    ports:\n      - \"12892:12892\"\n    environment:\n      - PTERODACTYL=true # Enable Pterodactyl driver installation\n      - LOCAL=true       # Enable Local driver installation\n    volumes:\n      - ./logs:/app/logs\n      - ./auth:/app/auth\n      - ./configs:/app/configs\n      - ./cloudlets:/app/cloudlets\n      - ./deployments:/app/deployments\n      - ./drivers:/app/drivers\n</code></pre>"},{"location":"controller/installation/docker/#step-2-start-the-container","title":"Step 2: Start the Container","text":"<p>To start the container, execute the following command:</p> <pre><code>docker compose up\n</code></pre>"},{"location":"controller/installation/normal/","title":"Normal \ud83d\udea7","text":"<p>This page is currently a work in progress.</p> <p>For the latest releases and updates, please visit our GitHub release page.</p> <p>We\u2019re actively working to provide accurate and useful content here. Please check back soon for updates.</p>"},{"location":"controller/usage/retrieve_token/","title":"Retrieve token","text":""},{"location":"controller/usage/retrieve_token/#retrieve-the-admin-token-on-first-launch","title":"Retrieve the Admin Token on First Launch","text":"<p>When you run the controller for the first time, an admin token will be displayed. You will need this token to connect via the CLI. For more information, see How to use the CLI.</p> <p></p>"},{"location":"controller/usage/retrieve_token/#retrieve-the-admin-token-after-the-first-launch","title":"Retrieve the Admin Token After the First Launch","text":"<p>If you lose the token, you can retrieve it from the default admin user's file, located in the <code>auth/users</code> directory.</p>"},{"location":"features/api/","title":"Robust APIs","text":"<ol> <li>The cloud infrastructure includes a sophisticated channel system to facilitate seamless communication between servers. For instance, game servers can transmit data to the lobby servers through these channels, ensuring efficient and reliable data flow.</li> <li>Additionally, the API suite provides functionalities to initiate server instances and manage player transitions between servers, enhancing the overall gaming experience and operational efficiency.</li> </ol>"},{"location":"features/backend/","title":"Modular Backend","text":"<p>Atomic Cloud features a versatile \"driver system\" that enables the cloud to utilize various methods to initiate the server. Examples of supported backends include Pterodactyl, Docker, and traditional servers (similar to CloudNet).</p>"},{"location":"features/backend/#supported-languages-for-driver-development","title":"Supported Languages for Driver Development","text":"<p>Drivers are implemented using WebAssembly and adhere to the WASI standard, which imposes certain compatibility constraints. It is highly recommended to develop drivers in Rust or utilize TeaVM for Java to ensure optimal performance and compatibility.</p>"},{"location":"features/backend/#currently-available-drivers","title":"Currently Available Drivers","text":"<ol> <li>Pterodactyl (with plans to support Pelican in the future)</li> </ol>"},{"location":"features/cli/","title":"Command Line Interface (CLI) Application","text":"<p>The cloud platform includes a robust Command Line Interface (CLI) application, similar to <code>kubectl</code>, which empowers users to manage and control cloud resources efficiently. This tool eliminates the need for frequent SSH logins for minor adjustments, streamlining your workflow and enhancing productivity.</p>"},{"location":"features/no_proxy/","title":"No Proxy Usage","text":"<p>Atomic Cloud is engineered from the ground up utilizing the latest Minecraft transfer packet technology, eliminating the need for proxy software such as Velocity or Bungeecord.</p>"},{"location":"features/no_proxy/#advantages-of-no-proxy","title":"Advantages of No Proxy","text":""},{"location":"features/no_proxy/#reduced-latency","title":"Reduced Latency","text":"<p>By removing the proxy layer, Atomic Cloud significantly reduces latency, providing a smoother and more responsive gaming experience.</p>"},{"location":"features/no_proxy/#regional-player-distribution","title":"Regional Player Distribution","text":"<p>The absence of a proxy allows for seamless distribution of players based on their geographical regions, enhancing server performance and player experience.</p>"},{"location":"features/no_proxy/#enhanced-network-stability","title":"Enhanced Network Stability","text":"<p>Without a single point of failure, the network becomes more resilient to crashes. In the event of a lobby crash, a new lobby is automatically initiated on a random port, making it difficult for attackers to disrupt the network consistently.</p> <p>Atomic Cloud's innovative approach ensures a robust, efficient, and secure environment for all players.</p>"},{"location":"wrapper/","title":"Wrapper \ud83d\udea7","text":"<p>This page is currently a work in progress. </p> <p>We\u2019re actively working to provide accurate and useful content here. Please check back soon for updates</p>"}]}